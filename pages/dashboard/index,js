// pages/dashboard/index.js
// Protected Sales Dashboard with Filters and Charts
import { useEffect, useState } from 'react'
import { useRouter } from 'next/router'
import { supabase } from '../../lib/supabaseClient'
import MarketFilter from '../../components/MarketFilter'
import SalesChart from '../../components/SalesChart'
import TopSkusBar from '../../components/TopSkusBar'

export default function Dashboard({ session }) {
  const router = useRouter()
  const [loading, setLoading] = useState(true)
  const [dashboardData, setDashboardData] = useState({
    metrics: {
      revenue: 0,
      orders: 0,
      unitsSold: 0,
      conversionRate: 0,
      adSpend: 0,
      acos: 0
    },
    salesData: [],
    topSkus: []
  })
  const [filters, setFilters] = useState({
    marketplace: 'US',
    sku: '',
    fromDate: '2024-01-01',
    toDate: '2024-12-31'
  })
  const [userProfile, setUserProfile] = useState(null)
  const [error, setError] = useState(null)

  // Session check and redirect
  useEffect(() => {
    if (!session) {
      router.push('/')
      return
    }
    
    // Load initial data
    loadUserProfile()
    loadDashboardData()
  }, [session, router])

  // Load user profile
  const loadUserProfile = async () => {
    try {
      const { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('id', session.user.id)
        .single()
      
      if (error && error.code !== 'PGRST116') {
        throw error
      }
      
      setUserProfile(data)
    } catch (err) {
      console.error('Error loading profile:', err)
      setError('Failed to load user profile')
    }
  }

  // Load dashboard data from API
  const loadDashboardData = async (newFilters = filters) => {
    try {
      setLoading(true)
      setError(null)

      // Get current session for API calls
      const { data: { session } } = await supabase.auth.getSession()
      
      if (!session) {
        throw new Error('No active session')
      }

      // Call the sales summary API
      const params = new URLSearchParams({
        marketplace: newFilters.marketplace,
        sku: newFilters.sku,
        from: newFilters.fromDate,
        to: newFilters.toDate
      })

      const response = await fetch(`/api/sales/summary?${params}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${session.access_token}`,
          'Content-Type': 'application/json'
        }
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.message || 'Failed to fetch dashboard data')
      }

      const data = await response.json()
      
      if (!data.success) {
        throw new Error(data.message || 'API returned unsuccessful response')
      }

      setDashboardData(data)
      
    } catch (err) {
      console.error('Error loading dashboard data:', err)
      setError(err.message)
      
      // Set fallback data on error
      setDashboardData({
        metrics: {
          revenue: 0,
          orders: 0,
          unitsSold: 0,
          conversionRate: 0,
          adSpend: 0,
          acos: 0
        },
        salesData: [],
        topSkus: []
      })
    } finally {
      setLoading(false)
    }
  }

  // Handle filter changes
  const handleFilterChange = (newFilters) => {
    setFilters(newFilters)
    loadDashboardData(newFilters)
  }

  // Handle sign out
  const handleSignOut = async () => {
    await supabase.auth.signOut()
    router.push('/')
  }

  // Loading state
  if (loading && !dashboardData.salesData.length) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading dashboard...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Amazon Seller Dashboard</h1>
              <p className="text-sm text-gray-600">
                {userProfile?.full_name || session.user.email} • 
                {filters.marketplace} • 
                {filters.fromDate} to {filters.toDate}
              </p>
            </div>
            <button
              onClick={handleSignOut}
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 border border-gray-300 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Sign Out
            </button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Error Alert */}
        {error && (
          <div className="mb-6 p-4 border-l-4 border-red-400 bg-red-50 rounded-md">
            <div className="flex">
              <div className="ml-3">
                <p className="text-sm text-red-700">
                  <strong>Error:</strong> {error}
                </p>
              </div>
            </div>
          </div>
        )}

        {/* Filters */}
        <MarketFilter 
          filters={filters}
          onFilterChange={handleFilterChange}
        />

        {/* Key Metrics */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <MetricCard 
            title="Revenue" 
            value={`$${dashboardData.metrics.revenue?.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || '0.00'}`}
            change={+5.2}
            color="text-green-600"
          />
          <MetricCard 
            title="Orders" 
            value={dashboardData.metrics.orders?.toLocaleString() || '0'}
            change={+12.8}
            color="text-blue-600"
          />
          <MetricCard 
            title="Units Sold" 
            value={dashboardData.metrics.unitsSold?.toLocaleString() || '0'}
            change={-2.1}
            color="text-purple-600"
          />
          <MetricCard 
            title="ACOS" 
            value={`${dashboardData.metrics.acos?.toFixed(1) || '0.0'}%`}
            change={-1.3}
            color="text-orange-600"
            isPercentage
          />
        </div>

        {/* Charts Section */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          {/* Sales Chart */}
          <div className="lg:col-span-2">
            <SalesChart 
              data={dashboardData.salesData}
              loading={loading}
            />
          </div>
        </div>

        {/* Top SKUs Chart */}
        <div className="mb-8">
          <TopSkusBar 
            data={dashboardData.topSkus}
            loading={loading}
          />
        </div>

        {/* Data Source Information */}
        <div className="text-center text-sm text-gray-500">
          <p>
            Data source: {dashboardData.dataSource || 'unknown'} • 
            Last updated: {new Date().toLocaleString()} • 
            Showing {dashboardData.salesData?.length || 0} data points
          </p>
        </div>
      </main>
    </div>
  )
}

// Metric Card Component
const MetricCard = ({ title, value, change, color = "text-gray-600", isPercentage = false }) => {
  const changeColor = change > 0 ? 'text-green-600' : change < 0 ? 'text-red-600' : 'text-gray-600'
  const changeIcon = change > 0 ? '↗' : change < 0 ? '↘' : '→'
  
  return (
    <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm font-medium text-gray-500 mb-1">{title}</p>
          <p className={`text-2xl font-bold ${color}`}>{value}</p>
        </div>
        <div className={`text-sm ${changeColor} text-right`}>
          <span className="inline-block">{changeIcon}</span>
          <span className="ml-1">
            {Math.abs(change).toFixed(1)}{isPercentage ? 'pp' : '%'}
          </span>
        </div>
      </div>
    </div>
  )
}