// pages/dashboard/index.js
import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import Head from 'next/head'
import MarketFilter from '../../components/MarketFilter'
import SalesChart from '../../components/SalesChart'
import TopSkusBar from '../../components/TopSkusBar'

const Dashboard = () => {
  const router = useRouter()
  const [loadingAuth, setLoadingAuth] = useState(true)
  const [authenticated, setAuthenticated] = useState(false)
  const [filters, setFilters] = useState({
    marketplace: 'US',
    sku: '',
    fromDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    toDate: new Date().toISOString().split('T')[0]
  })
  const [dashboardData, setDashboardData] = useState({
    metrics: {
      revenue: 0,
      orders: 0,
      unitsSold: 0,
      conversionRate: 0
    },
    salesAdSpendData: [],
    topSkusData: [],
    loadingData: false,
    error: null
  })

  // Check authentication
  useEffect(() => {
    const verifyAuth = async () => {
      try {
        const response = await fetch('/api/auth/session', {
          method: 'GET',
          credentials: 'include'
        })
        
        if (!response.ok) {
          throw new Error('Authentication failed')
        }
        
        const session = await response.json()
        
        if (session && session.user) {
          setAuthenticated(true)
        } else {
          router.replace('/login')
          return
        }
      } catch (error) {
        console.error('Auth error:', error)
        router.replace('/login')
        return
      } finally {
        setLoadingAuth(false)
      }
    }

    verifyAuth()
  }, [router])

  // Fetch dashboard data
  useEffect(() => {
    if (!authenticated) return

    const fetchData = async () => {
      setDashboardData(prev => ({
        ...prev,
        loadingData: true,
        error: null
      }))

      try {
        const params = new URLSearchParams({
          marketplace: filters.marketplace,
          sku: filters.sku || '',
          from: filters.fromDate,
          to: filters.toDate
        })

        const response = await fetch(`/api/sales/summary?${params}`, {
          method: 'GET',
          credentials: 'include'
        })

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: Failed to fetch data`)
        }

        const data = await response.json()
        
        setDashboardData({
          metrics: data.metrics || {
            revenue: 0,
            orders: 0,
            unitsSold: 0,
            conversionRate: 0
          },
          salesAdSpendData: data.salesAdSpendData || [],
          topSkusData: data.topSkusData || [],
          loadingData: false,
          error: null
        })
      } catch (error) {
        console.error('Data fetch error:', error)
        setDashboardData(prev => ({
          ...prev,
          loadingData: false,
          error: error.message
        }))
      }
    }

    fetchData()
  }, [filters, authenticated])

  const handleFilterChange = (newFilters) => {
    setFilters(prevFilters => ({
      ...prevFilters,
      ...newFilters
    }))
  }

  const handleLogout = async () => {
    try {
      await fetch('/api/auth/logout', { 
        method: 'POST',
        credentials: 'include'
      })
    } catch (error) {
      console.error('Logout error:', error)
    } finally {
      router.replace('/login')
    }
  }

  // Loading state
  if (loadingAuth) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  // Not authenticated
  if (!authenticated) {
    return null
  }

  return (
    <>
      <Head>
        <title>Amazon Seller Dashboard</title>
        <meta name="description" content="Amazon Seller Performance Dashboard" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <header className="bg-white shadow">
          <div className="max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center">
              <h1 className="text-2xl font-bold text-gray-900">
                Amazon Seller Dashboard
              </h1>
              <button
                onClick={handleLogout}
                className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200"
                type="button"
              >
                Logout
              </button>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <main className="max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8">
          {/* Filters Section */}
          <div className="bg-white shadow rounded-lg p-6 mb-6">
            <h2 className="text-lg font-medium text-gray-900 mb-4">Filters</h2>
            <MarketFilter 
              filters={filters}
              onFilterChange={handleFilterChange}
            />
          </div>

          {/* Error State */}
          {dashboardData.error && (
            <div className="bg-red-50 border border-red-200 rounded-md p-4 mb-6">
              <div className="flex">
                <div className="flex-shrink-0">
                  <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-red-800">
                    Error loading dashboard data
                  </h3>
                  <p className="text-sm text-red-700 mt-1">
                    {dashboardData.error}
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* Success State */}
          {!dashboardData.error && (
            <>
              {/* Metrics Cards */}
              <div className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4 mb-8">
                <MetricCard
                  title="Revenue"
                  value={`$${dashboardData.metrics.revenue.toLocaleString()}`}
                  loading={dashboardData.loadingData}
                />
                <MetricCard
                  title="Orders"
                  value={dashboardData.metrics.orders.toLocaleString()}
                  loading={dashboardData.loadingData}
                />
                <MetricCard
                  title="Units Sold"
                  value={dashboardData.metrics.unitsSold.toLocaleString()}
                  loading={dashboardData.loadingData}
                />
                <MetricCard
                  title="Conversion Rate"
                  value={`${dashboardData.metrics.conversionRate.toFixed(2)}%`}
                  loading={dashboardData.loadingData}
                />
              </div>

              {/* Charts Section */}
              <div className="grid grid-cols-1 gap-8 lg:grid-cols-2">
                {/* Sales Chart */}
                <section className="bg-white shadow rounded-lg p-6">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">
                    Sales vs Ad Spend
                  </h3>
                  <SalesChart
                    data={dashboardData.salesAdSpendData}
                    loading={dashboardData.loadingData}
                  />
                </section>

                {/* Top SKUs Chart */}
                <section className="bg-white shadow rounded-lg p-6">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">
                    Top Performing SKUs
                  </h3>
                  <TopSkusBar
                    data={dashboardData.topSkusData}
                    loading={dashboardData.loadingData}
                  />
                </section>
              </div>
            </>
          )}
        </main>
      </div>
    </>
  )
}

// MetricCard Component
const MetricCard = ({ title, value, loading = false }) => {
  return (
    <div className="bg-white overflow-hidden shadow rounded-lg">
      <div className="p-5">
        <div className="flex items-center">
          <div className="flex-shrink-0">
            <div className="w-8 h-8 bg-blue-500 rounded-md flex items-center justify-center">
              <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
              </svg>
            </div>
          </div>
          <div className="ml-5 w-0 flex-1">
            <dl>
              <dt className="text-sm font-medium text-gray-500 truncate">
                {title}
              </dt>
              <dd className="mt-1 text-2xl font-semibold text-gray-900">
                {loading ? (
                  <div className="animate-pulse bg-gray-200 h-8 w-20 rounded"></div>
                ) : (
                  value
                )}
              </dd>
            </dl>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Dashboard